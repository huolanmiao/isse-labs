********************************************
* Round 1 & 2 - backend and frontend setup *
********************************************

项目目标
请你帮我用 Flask（后端） + HTML/CSS/JavaScript（前端） 设计一个 TodoList 任务管理系统，要求实现以下功能：
1. 用户可输入新的待办事项；
2. 待办事项展示在列表中；
3. 可删除任务；
4. 可标记任务为完成；
5. 任务可按照优先级分类（高/中/低）；
6. 任务可按类别（学习/工作/生活）进行分类与筛选。

---
 开发规范说明
目的：生成一个清晰分层、易于扩展的系统，便于教学演示与调试。
 所有代码请分模块编写，后端和前端逻辑清晰独立。

---
一、技术栈与语言定义
- 后端框架：Python Flask
- 前端：HTML + CSS + JavaScript（原生，不使用框架）
- 数据格式：JSON
- 运行方式：Flask 提供 RESTful API，前端用 fetch() 调用接口

---
二、开发顺序（强制分步）
请按以下顺序生成与测试代码，每步都需自检说明。

---
第一步：后端接口设计
1. 设计 Flask 后端，包含以下路由：
  - GET /tasks：获取全部任务；
  - POST /tasks：新增任务；
  - PUT /tasks/<id>：修改任务状态（完成/未完成）；
  - DELETE /tasks/<id>：删除任务；
  - 可选：GET /tasks?category=xxx、GET /tasks?priority=high 支持筛选。
2. 每个任务对象字段如下：
{
  "id": 1,
  "title": "写实验报告",
  "category": "学习",
  "priority": "高",
  "completed": false
}
3. 暂不使用数据库，用内存列表（或 JSON 文件）模拟存储。
4. 后端返回统一格式：
{
  "status": "success",
  "data": [...],
  "message": "新增成功"
}
5. 编写 app.py，测试接口在 Postman 或浏览器中能正常返回。

---
 第二步：前端页面结构设计
1. 设计一个主页面 index.html，包含以下部分：
  - 输入框（输入待办事项标题）；
  - 下拉菜单（选择分类与优先级）；
  - “添加任务”按钮；
  - 任务展示区（列表形式，每项包含任务名、类别、优先级、状态、操作按钮）。
2. 页面使用简洁布局：
  - 顶部：输入表单；
  - 中间：任务列表；
  - 底部：筛选功能区（按分类 / 优先级）。
3. 样式说明：
  - 未完成任务灰色；
  - 已完成任务加删除线；
  - 高优先级任务红色标识。

---
 第三步：前端逻辑与交互（JavaScript）
1. 使用 fetch() 调用后端 API，实现以下功能：
  - 添加任务：POST；
  - 加载任务列表：GET；
  - 删除任务：DELETE；
  - 切换任务状态：PUT；
  - 分类/优先级筛选：GET（带查询参数）。
2. 每次操作后自动刷新列表。
3. 编写 static/script.js，逻辑清晰、模块化：
  - loadTasks()
  - addTask()
  - deleteTask(id)
  - toggleTask(id)
  - filterTasks()
 第四步：模块化结构要求
项目结构如下（AI生成代码需遵守）：
todolist/
│
├── app.py                  # Flask 后端
├── templates/
│   └── index.html          # 前端主页面
└── static/
    ├── style.css           # 样式文件
    └── script.js           # 前端逻辑

---
 三、补充开发规范
🧩 路由命名	使用 RESTful 风格
🧩 变量命名	驼峰命名法（addTask, getTasks）
🧩 数据交互	全部使用 JSON
🧩 错误处理	返回 "status": "error" 和 "message" 字段
🧩 注释规范	每个函数写一句用途说明
🧩 样式规范	使用浅灰背景 + 卡片式任务框，hover有轻微阴影
🧩 代码测试	每完成一个接口后先用 Postman 测试，再接前端
---
四、交互细节（前端说明）
功能	用户操作	系统响应
添加任务	输入内容 + 选择分类/优先级 + 点击添加	调用 POST /tasks，刷新任务列表
标记完成	点击“完成”按钮	任务变灰并加删除线
删除任务	点击“删除”按钮	调用 DELETE 接口，刷新列表
筛选任务	选择分类或优先级	调用 GET /tasks?category=xx 或 priority=xx
全部任务	点击“显示全部”	显示所有任务

***************************


*******************************
* Round 3 - advanced features *
*******************************

1. 保证交互细节（前端说明）
功能    用户操作        系统响应
添加任务        输入内容 + 选择分类/优先级 + 点击添加   调用 POST /tasks，刷新任务列表
标记完成        点击“完成”按钮  任务变灰并加删除线
删除任务        点击“删除”按钮  调用 DELETE 接口，刷新列表
筛选任务        选择分类或优先级        调用 GET /tasks?category=xx 或 priority=xx
全部任务        点击“显示全部”  显示所有任务 

2. 添加时间排序功能
- 在任务对象中添加任务截止时间字段 "due_date": "2024-12-31T23:59:59"
- 前端添加排序按钮，支持按任务时间升序/降序排列任务列表

3. 支持任务编辑功能
- 前端每个任务项添加“编辑”按钮，点击后可修改任务标题、类别、优先级
- 调用 PUT /tasks/<id> 接口更新任务
- 确保编辑后任务列表自动刷新

4. 数据持久化存储
- 将任务数据存储在本地 JSON 文件中，确保服务器重启后数据不丢失
- 修改后端代码，支持读写 JSON 文件

补充开发规范
🧩 路由命名	使用 RESTful 风格
🧩 变量命名	驼峰命名法（addTask, getTasks）
🧩 数据交互	全部使用 JSON
🧩 错误处理	返回 "status": "error" 和 "message" 字段
🧩 注释规范	每个函数写一句用途说明
🧩 样式规范	使用浅灰背景 + 卡片式任务框，hover有轻微阴影
🧩 代码测试	每完成一个接口后先用 Postman 测试，再接前端


*******************************
* Round 4 - advanced features *
*******************************

1. 已完成任务与未完成任务分区显示
- 前端任务列表分为“未完成任务”和“已完成任务”两个区域
- 每个区域内任务可按优先级和截止时间排序

2. 批量操作功能
- 前端添加多选框，支持批量删除和批量标记完成
- 调用相应的后端接口处理批量操作

3. 任务搜索功能
- 前端添加搜索框，支持按任务标题关键词搜索
- 调用 GET /tasks?search=keyword 接口返回搜索结果

4. UI 优化
- 模仿 MacOS 风格设计界面，使用圆角卡片、磨砂玻璃、柔和色彩
- 添加任务完成动画效果, 完成任务后渐变消失后移动到已完成区域

*******************************
* Round 5 - generate README   *
*******************************

请为该项目生成完整的 **`README.md`** 文件，要求内容详实、结构清晰，语言自然流畅，适合在 GitHub 展示。

### 📘 内容要求

README 必须包含以下部分（按顺序）：

1. **项目简介**

   * 简要说明项目的背景、目标与主要功能。
   * 可以补充一句话概述（tagline）来突出项目价值。

2. **技术栈**

   * 罗列主要使用的编程语言、框架、库、工具（如 PyTorch、React、Docker 等）。
   * 可使用项目符号（bullet points）或表格形式。

3. **项目结构说明**

   * 以树状结构展示项目目录。
   * 简要说明各个模块或文件夹的作用。

4. **安装与运行步骤**

   * 分别列出 **环境依赖**、**安装命令**、**运行项目** 的步骤。
   * 代码块格式化命令（如 ```bash）。
   * 若有可选配置文件或参数说明，也一并说明。

5. **使用说明**

   * 详细介绍每个核心功能的使用方法和参数说明。
   * 若需要展示示例或截图，请在合适位置标注：

     > “（此处插入截图）”
   * 可包含输入输出示例、命令行用法、或界面操作步骤。

6. **功能列表**
   * 用条目或表格形式列出项目支持的所有功能。
   * 简要描述功能作用和用途。

---
### 📋 格式与风格要求

* **语言**：中文
* **风格**：专业、清晰、易读
* **排版**：使用 Markdown 标题层级（#、##、###）分段；适当添加项目符号、代码块、引用块。
* **可读性**：各部分之间应逻辑连贯，不堆砌关键词。
---
